package io.mockative

import io.mockative.matchers.ArgumentsMatcher
import io.mockative.matchers.Matcher
import io.mockative.matchers.SpecificArgumentsMatcher
import kotlin.reflect.KFunction

class GivenFunction#count#Builder<#type-param-list#, R>(private val mock: Mockable, private val function: KFunction<R>) {
    fun whenInvokedWith(#with.parameters#): ResultBuilder {
        val arguments = SpecificArgumentsMatcher(listOf(#with.arguments#))
        return ResultBuilder(arguments)
    }

    @Suppress("UNCHECKED_CAST")
    inner class ResultBuilder(private val arguments: ArgumentsMatcher) : AnyResultBuilder<R> {
        fun then(block: (#type-param-list#) -> R) {
            val expectation = Expectation.Function(function.name, arguments)
            val stub = BlockingStub(expectation) { args ->
                block(#then.arguments#)
            }
            mock.addBlockingStub(stub)
        }

        override fun thenInvoke(block: () -> R) = then { #thenInvoke.underscores# -> block() }
    }
}